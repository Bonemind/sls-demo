# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-demo
plugins:
  - serverless-pseudo-parameters
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
#
custom:
  stage: ${opt:stage, self:provider.stage}
  s3bucket: rs.imageresize.demo.${self:custom.stage}
  dynamodb_table: imageresize_${self:custom.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.dynamodb_table}"
  - Effect: "Allow"
    Action:
      - "s3:PutObject"
      - "s3:GetObject"
      - "s3:ListObjects"
      - "s3:DeleteObject"
      - "s3:CopyObject"
      - "s3:GetObjectTagging"
      - "s3:PutObjectTagging"
    Resource: "arn:aws:s3:::${self:custom.s3bucket}/*"

# you can define service wide environment variables here
environment:
   IMAGE_BUCKET: ${self:custom.s3bucket}
   DYNAMODB_TABLE: ${self:custom.dynamodb_table}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  resizer:
    handler: imageresizer.handler
    environment:
       IMAGE_BUCKET: ${self:custom.s3bucket}
       DYNAMODB_TABLE: ${self:custom.dynamodb_table}
    events:
      - s3:
          bucket: ${self:custom.s3bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
  list_images:
    handler: listimages.handler
    environment:
       IMAGE_BUCKET: ${self:custom.s3bucket}
       DYNAMODB_TABLE: ${self:custom.dynamodb_table}
    events:
      - http:
          path: /images
          method: get


resources:
  Resources:
    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table}
        AttributeDefinitions:
          - AttributeName: ImageId
            AttributeType: S
        KeySchema:
          - AttributeName: ImageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
